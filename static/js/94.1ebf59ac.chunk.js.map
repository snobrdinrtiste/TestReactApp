{"version":3,"sources":["../node_modules/@stencil/core/internal/client lazy /^/.*$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","hooks/windowResizeHeight.js","views/FSL/fsl.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","getHeight","window","innerHeight","document","documentElement","clientHeight","body","config","assetsPath","Fsl","useState","collapseRouteDiv","setCollapseRouteDiv","mapDiv","useRef","moment","format","selectedDate","setSelectedDate","address","type","contact","routegroup","setRouteGroup","winheight","height","setHeight","useEffect","resizeListener","addEventListener","removeEventListener","windowResizeHeight","current","map","ArcGISMap","basemap","view","MapView","center","zoom","container","basemapGallery","BasemapGallery","createElement","basemapExpand","Expand","content","watch","collapse","locateBtn","Locate","layerList","LayerList","listItemCreatedFunction","event","item","layer","panel","open","layerListExpand","collectionboundary","FeatureLayer","url","outFields","popupTemplate","title","fieldInfos","fieldName","label","gatedcommunities","visible","specialtrucks","collectionyards","ui","add","addMany","style","marginTop","md","xs","className","onClick","selecteddate","subtract","color","custom","name","value","textAlign","border","ref","show","width","borderLeft","backgroundColor","display","gap","marginBottom","overflow","onDragEnd","result","destination","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","droppableId","provided","snapshot","droppableProps","innerRef","isDraggingOver","background","padding","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","fontSize","fontWeight","placeholder"],"mappings":"sLAAA,SAASA,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,KAGRL,EAAyBQ,KAAO,WAAa,MAAO,IACpDR,EAAyBG,QAAUH,EACnCS,EAAOC,QAAUV,EACjBA,EAAyBW,GAAK,M,2MCVxBC,G,QAAY,kBAAMC,OAAOC,YAAc,KACxCC,SAASC,gBAAgBC,aAAe,KACxCF,SAASG,KAAKD,aAAe,M,YC0BlCE,IAAOC,WAAa,WA+ZLC,UA7Zf,WACE,MAAgDC,oBAAS,GAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACMC,EAASC,iBAAO,MACtB,EAAwCJ,mBAASK,MAASC,OAAO,iBAAjE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCR,mBAClC,CACE,CAAEX,GAAI,EAAGoB,QAAS,yBAA0BC,KAAM,QAASC,QAAS,eACpE,CAAEtB,GAAI,EAAGoB,QAAS,yBAA0BC,KAAM,QAASC,QAAS,iBACpE,CAAEtB,GAAI,EAAGoB,QAAS,yBAA0BC,KAAM,QAASC,QAAS,uBACpE,CAAEtB,GAAI,EAAGoB,QAAS,wBAAyBC,KAAM,QAASC,QAAS,gBACnE,CAAEtB,GAAI,EAAGoB,QAAS,yBAA0BC,KAAM,QAASC,QAAS,UANxE,mBAAOC,EAAP,KAAmBC,EAAnB,KASMC,EDvCO,WAEb,MAA0Bd,mBAASV,KAAnC,mBAAKyB,EAAL,KAAaC,EAAb,KAwBA,OApBAC,qBAAU,WAER,IACMC,EAAiB,WACrBF,EAAU1B,MAUZ,OAHAC,OAAO4B,iBAAiB,SAAUD,GAG3B,WAEL3B,OAAO6B,oBAAoB,SAAUF,MAEtC,IAEIH,ECaWM,GAiShB,OA/RFJ,qBAAU,WACJ,GAAId,EAAOmB,QAAS,CAEhB,IAAMC,EAAM,IAAIC,IAAU,CACtBC,QAAS,gBAGPC,EAAO,IAAIC,IAAQ,CACrBJ,MACAK,OAAQ,EAAE,QAAS,OACnBC,KAAM,GACNC,UAAW3B,EAAOmB,UAIhBS,EAAiB,IAAIC,IAAe,CACxCN,KAAMA,EACNI,UAAWrC,SAASwC,cAAc,SAI1BC,EAAgB,IAAIC,IAAO,CAC/BT,KAAMA,EACNU,QAASL,IAIPA,EAAeM,MAAM,iBAAiB,WACpCH,EAAcI,cAQxB,IAAMC,EAAY,IAAIC,IAAO,CAC3Bd,KAAMA,IAIFe,EAAY,IAAIC,IAAU,CAC9BhB,KAAMA,EACNiB,wBAAyB,SAASC,GAChC,IAAMC,EAAOD,EAAMC,KACI,SAAnBA,EAAKC,MAAMpC,OAEbmC,EAAKE,MAAQ,CACXX,QAAS,SACTY,MAAM,OAOJC,EAAkB,IAAId,IAAO,CACjCT,KAAMA,EACNU,QAASK,IAwHTS,EAAqB,IAAIC,UAAa,CAC1CC,IACE,gGACFC,UAAW,CAAC,KACZC,cAxHuB,CAEvBC,MAAO,oCACPnB,QAAS,CACP,CAIE1B,KAAM,SACN8C,WAAY,CACV,CACEC,UAAW,WACXC,MAAO,YAET,CACED,UAAW,UACXC,MAAO,WAET,CACED,UAAW,MACXC,MAAO,cAET,CACED,UAAW,aACXC,MAAO,qBAiGfH,MAAO,UAIHI,EAAmB,IAAIR,UAAa,CACxCC,IACE,gGACFC,UAAW,CAAC,KACZC,cAhG0B,CAE1BC,MAAO,kBACPnB,QAAS,CACP,CAIE1B,KAAM,SACN8C,WAAY,CACV,CACEC,UAAW,WACXC,MAAO,YAET,CACED,UAAW,UACXC,MAAO,WAET,CACED,UAAW,MACXC,MAAO,cAET,CACED,UAAW,aACXC,MAAO,qBAyEfH,MAAO,oBACPK,SAAS,IAILC,EAAgB,IAAIV,UAAa,CACrCC,IACE,8GACFC,UAAW,CAAC,KACZC,cAzEyB,CAEzBC,MAAO,uBACPnB,QAAS,CACP,CAIE1B,KAAM,SACN8C,WAAY,CACV,CACEC,UAAW,aACXC,MAAO,kBA8DfH,MAAO,iBACPK,SAAS,IAILE,EAAkB,IAAIX,UAAa,CACvCC,IACE,2GACFC,UAAW,CAAC,KACZC,cA/D2B,CAE3BC,MAAO,0BACPnB,QAAS,CACP,CAIE1B,KAAM,SACN8C,WAAY,CACV,CACEC,UAAW,QACXC,MAAO,WAET,CACED,UAAW,SACXC,MAAO,oBAET,CACED,UAAW,QACXC,MAAO,oBA4CfH,MAAO,qBAGT7B,EAAKqC,GAAGC,IAAIzB,EAAW,YACvBb,EAAKqC,GAAGC,IAAIf,EAAiB,YAC7BvB,EAAKqC,GAAGC,IAAI9B,EAAe,aAC3BX,EAAI0C,QAAQ,CAACf,EAAoBS,EAAkBE,EAAeC,OAqBvE,IAiDC,sBAAKI,MAAO,CAACC,UAAW,SAAxB,UACI,eAAC,KAAD,CAAMC,GAAG,KAAT,UACE,eAAC,IAAD,CAAMC,GAAG,KAAKD,GAAG,IAAjB,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASE,UAAU,cAAcC,QAAS,kBAAM/D,GAmGjDgE,EAnGyEjE,EAoG1EF,IAAOmE,GAAcC,SAAS,EAAE,KAAKnE,OAAO,kBAD5D,IAAiBkE,GAnGC,eACA,cAAC,IAAD,CAASE,MAAM,YAAYH,QAAS,kBAAM/D,EAAgBH,MAASC,OAAO,kBAA1E,mBACA,cAAC,IAAD,CAASgE,UAAU,cAAcC,QAAS,kBAAM/D,GA4FjDgE,EA5FyEjE,EA6F1EF,IAAOmE,GAAcR,IAAI,EAAE,KAAK1D,OAAO,kBADvD,IAAiBkE,GA5FC,kBAJJ,aAME,+BAAOjE,OAET,cAAC,IAAD,CAAM6D,GAAG,IAAT,SACE,eAAC,KAAD,CAAMA,GAAG,IAAT,UACE,cAAC,IAAD,CAAMC,GAAG,IAAID,GAAG,IAAhB,SACE,eAAC,KAAD,CAASO,QAAM,EAACC,KAAK,aAAavF,GAAG,aAArC,UACE,wBAAQwF,MAAM,IAAd,kCACA,wBAAQA,MAAM,KAAd,yBACA,wBAAQA,MAAM,KAAd,oBACA,wBAAQA,MAAM,KAAd,2BACA,wBAAQA,MAAM,MAAd,+BACA,wBAAQA,MAAM,MAAd,8BACA,wBAAQA,MAAM,KAAd,8BAGJ,cAAC,IAAD,CAAMR,GAAG,IAAID,GAAG,IAAhB,SACE,eAAC,KAAD,CAASO,QAAM,EAACC,KAAK,eAAevF,GAAG,eAAvC,UACE,wBAAQwF,MAAM,IAAd,oCACA,wBAAQA,MAAM,IAAd,uBACA,wBAAQA,MAAM,IAAd,uBACA,wBAAQA,MAAM,IAAd,4BAGJ,cAAC,IAAD,CAAMR,GAAG,IAAID,GAAG,IAAIF,MAAO,CAACY,UAAW,SAAvC,SACE,eAAC,IAAD,CAASJ,MAAM,OAAOH,QAAW,kBAAMrE,GAAqBD,IAA5D,UACE,cAAC,IAAD,CAAO2E,KAAM,mBADf,0BAOR,qBAAKN,UAAU,SAASJ,MAAO,CAACC,UAAU,OAAQpD,OAAQD,EAAWiE,OAAQ,kBAAmBC,IAAK7E,EAArG,SACE,cAAC,IAAD,CAAW8E,KAAMhF,EAAjB,SACE,qBAAKiE,MAAO,CAACgB,MAAO,QAASnE,OAAQD,EAAWqE,WAAY,iBAAkBC,gBAAgB,QAA9F,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,CAASV,MAAM,OAAf,UACE,cAAC,IAAD,CAAOE,KAAM,gBADf,wBAIF,cAAC,IAAD,UACE,qBAAKV,MAAO,CAAEmB,QAAS,OAAQC,IAAK,OAAQC,aAAc,OAAQC,SAAU,UAA5E,SACE,cAAC,IAAD,CAAiBC,UAnEnB,SAACC,GAEjB,GAAKA,EAAOC,YAAZ,CAIA,IAAMC,EAbQ,SAACC,EAAMC,EAAYC,GACjC,IAAML,EAASM,MAAMC,KAAKJ,GAC1B,EAAkBH,EAAOQ,OAAOJ,EAAY,GAArCK,EAAP,oBAEA,OADAT,EAAOQ,OAAOH,EAAU,EAAGI,GACpBT,EASOU,CACZxF,EACA8E,EAAOW,OAAOC,MACdZ,EAAOC,YAAYW,OAGrBzF,EAAc+E,KAuDI,SACE,cAAC,IAAD,CAAWW,YAAY,YAAvB,SACG,SAACC,EAAUC,GAAX,OACC,gDACMD,EAASE,gBADf,IAEE1B,IAAKwB,EAASG,SACdzC,OAAoBuC,EAASG,eAxFjB,CAEtCC,WAAY,OACZC,QAlBW,EAmBX5B,MAAO,MAiFiB,UAKGtE,EAAWW,KAAI,SAACsB,EAAMyD,GAAP,OACd,cAAC,IAAD,CAAyBS,YAAa,GAAKlE,EAAKxD,GAASiH,MAAOA,EAAhE,SACG,SAACE,EAAUC,GAAX,OACC,0DACEzB,IAAKwB,EAASG,UACVH,EAASQ,gBACTR,EAASS,iBAHf,IAIE/C,OA/GdgD,EAgHgBT,EAASS,WAhHbC,EAiHIX,EAASQ,eAAe9C,MAjHzC,aAEnBkD,WAAY,OACZN,QAASO,GACTC,OAAO,OAAD,OALK,EAKL,QACNvC,OAAQ,iBAGR8B,WAAYK,EAAa,YAAc,WAGpCC,IAgG6B,UASE,qBAAKjD,MAAO,CAAEgB,MAAM,OAAQH,OAAO,kBAAmBwC,SAAS,OAAQC,WAAW,SACpEpC,gBAAgB,UAAWN,UAAU,UADnD,SACgEwB,EAAM,IACtE,gCACE,sBAAMpC,MAAO,CAACsD,WAAW,QAAzB,0BADF,IACyD,IAAKlB,EAD9D,IACqE,uBACnE,sBAAMpC,MAAO,CAACsD,WAAW,QAAzB,0BAFF,IAEyD,OAAS,IAAKlB,GAFvE,IAE+E,uBAC7E,sBAAMpC,MAAO,CAACsD,WAAW,QAAzB,sBAHF,IAGqD3E,EAAKpC,QAH1D,IAGmE,uBACjE,sBAAMyD,MAAO,CAACsD,WAAW,QAAzB,uBAJF,IAIsD3E,EAAKlC,QAJ3D,IAIoE,uBAClE,sBAAMuD,MAAO,CAACsD,WAAW,QAAzB,wBALF,IAKuD3E,EAAKnC,YA3H3E,IAACwG,EAAYC,IAyGYtE,EAAKxD,OAwBtBmH,EAASiB","file":"static/js/94.1ebf59ac.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 1648;","import { useState, useEffect } from 'react';\r\n\r\nconst getHeight = () => window.innerHeight - 205\r\n  || document.documentElement.clientHeight - 205\r\n  || document.body.clientHeight - 205;\r\n\r\nexport default function useCurrentHeight() {\r\n  // save current window height in the state object\r\n  let [height, setHeight] = useState(getHeight());\r\n\r\n  // in this case useEffect will execute only once because\r\n  // it does not have any dependencies.\r\n  useEffect(() => {\r\n    // timeoutId for debounce mechanism\r\n    let timeoutId = null;\r\n    const resizeListener = () => {\r\n      setHeight(getHeight());\r\n      // // prevent execution of previous setTimeout\r\n      // clearTimeout(timeoutId);\r\n      // // change height from the state object after 150 milliseconds\r\n      // timeoutId = setTimeout(() => setHeight(getHeight()), 150);\r\n    };\r\n    // set resize listener\r\n    window.addEventListener('resize', resizeListener);\r\n\r\n    // clean up function\r\n    return () => {\r\n      // remove resize listener\r\n      window.removeEventListener('resize', resizeListener);\r\n    }\r\n  }, [])\r\n\r\n  return height;\r\n}","import React, { useRef, useEffect, useState } from \"react\";\r\nimport CIcon from '@coreui/icons-react';\r\nimport { CButton, CButtonGroup,\r\n         CCollapse,\r\n         CCard,\r\n         CCardBody,\r\n         CCardFooter,\r\n         CCardHeader,\r\n         CCol, \r\n         CFormGroup,\r\n         CLabel, CListGroup, CListGroupItem,\r\n         CSelect, CContainer, CRow, CWidgetIcon } from '@coreui/react';\r\nimport \"./fsl.scss\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n/* moment.js datetime js library */\r\nimport moment from 'moment';\r\n/* ArcGIS JSAPI ESM imports */\r\nimport config from '@arcgis/core/config.js';\r\nimport ArcGISMap from \"@arcgis/core/Map\";\r\nimport MapView from \"@arcgis/core/views/MapView\";\r\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\nimport Locate from '@arcgis/core/widgets/Locate';\r\nimport LayerList from '@arcgis/core/widgets/LayerList';\r\n// @arcgis/core styles\r\nimport \"@arcgis/core/assets/esri/themes/dark/main.css\";\r\n//\r\nimport windowResizeHeight from \"../../hooks/windowResizeHeight\";\r\nimport { withRouter } from \"react-router-dom\";\r\nconfig.assetsPath = './assets';\r\n\r\nfunction Fsl() {\r\n  const [collapseRouteDiv, setCollapseRouteDiv] = useState(false);\r\n  const mapDiv = useRef(null);\r\n  const [selectedDate, setSelectedDate] = useState(moment().format(\"ddd MM/DD/YY\"));\r\n  const [routegroup, setRouteGroup] = useState(\r\n    [\r\n      { id: 1, address: '200 N Spring St, 90012', type: \"bulky\", contact: \"Kobe Bryant\" },\r\n      { id: 2, address: '320 S Grand Ave, 90015', type: \"bulky\", contact: \"Magic Johnson\" },\r\n      { id: 3, address: '1449 S Broadway, 90015', type: \"bulky\", contact: \"Kareem Abdul-Jabbar\" },\r\n      { id: 4, address: '555 Ramirez St, 90012', type: \"bulky\", contact: \"Lebron James\" },\r\n      { id: 5, address: '110 W Temple St, 90012', type: \"bulky\", contact: \"SHAQ\" },\r\n    ]\r\n  );\r\n  const winheight = windowResizeHeight();  \r\n\r\n  useEffect(() => {\r\n        if (mapDiv.current) {\r\n            /* Init map */\r\n            const map = new ArcGISMap({\r\n                basemap: \"gray-vector\",\r\n            });\r\n            /* Init mapview */\r\n            const view = new MapView({\r\n                map,\r\n                center: [-118.345, 33.990],\r\n                zoom: 10,\r\n                container: mapDiv.current\r\n            });\r\n\r\n            /* Init BasemapGallery */\r\n            const basemapGallery = new BasemapGallery({\r\n              view: view,\r\n              container: document.createElement(\"div\")\r\n            });\r\n\r\n                /* Init basemapExpand */\r\n                const basemapExpand = new Expand({\r\n                  view: view,\r\n                  content: basemapGallery\r\n                });\r\n\r\n                    // close the basemapExpand whenever a basemap is selected\r\n                    basemapGallery.watch(\"activeBasemap\", function() {\r\n                      basemapExpand.collapse();\r\n                      // var mobileSize = view.heightBreakpoint === \"xsmall\" || view.widthBreakpoint === \"xsmall\";\r\n                      // if (mobileSize) {\r\n                      //   basemapExpand.collapse();\r\n                      // }\r\n                    });    \r\n            \r\n            /* Init basemapExpand */\r\n            const locateBtn = new Locate({\r\n              view: view\r\n            });                \r\n\r\n            /* Init LayerList */\r\n            const layerList = new LayerList({\r\n              view: view,\r\n              listItemCreatedFunction: function(event) {\r\n                const item = event.item;\r\n                if (item.layer.type != \"group\") {\r\n                  // don't show legend twice\r\n                  item.panel = {\r\n                    content: \"legend\",\r\n                    open: true\r\n                  };\r\n                }\r\n              }\r\n            });\r\n\r\n                /* Init layerListExpand */\r\n                const layerListExpand = new Expand({\r\n                  view: view,\r\n                  content: layerList\r\n                });\r\n\r\n            /* Init the popupTemplate to query on the selected yard boundary */\r\n            const popupCollections = {\r\n              // autocasts as new PopupTemplate()\r\n              title: \"Collection Day Area: {district_n}\",\r\n              content: [\r\n                {\r\n                  // It is also possible to set the fieldInfos outside of the content\r\n                  // directly in the popupTemplate. If no fieldInfos is specifically set\r\n                  // in the content, it defaults to whatever may be set within the popupTemplate.\r\n                  type: \"fields\",\r\n                  fieldInfos: [\r\n                    {\r\n                      fieldName: \"district\",\r\n                      label: \"DISTRICT\",\r\n                    },\r\n                    {\r\n                      fieldName: \"section\",\r\n                      label: \"SECTION\",\r\n                    },\r\n                    {\r\n                      fieldName: \"day\",\r\n                      label: \"PICKUP DAY\",\r\n                    },\r\n                    {\r\n                      fieldName: \"last_edi_1\",\r\n                      label: \"MODIFIED DATE\",\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            };\r\n\r\n\r\n            /* Init the popupTemplate to query on the selected yard boundary */\r\n            const popupGatedCommunity = {\r\n              // autocasts as new PopupTemplate()\r\n              title: \"Gated Community\",\r\n              content: [\r\n                {\r\n                  // It is also possible to set the fieldInfos outside of the content\r\n                  // directly in the popupTemplate. If no fieldInfos is specifically set\r\n                  // in the content, it defaults to whatever may be set within the popupTemplate.\r\n                  type: \"fields\",\r\n                  fieldInfos: [\r\n                    {\r\n                      fieldName: \"district\",\r\n                      label: \"DISTRICT\",\r\n                    },\r\n                    {\r\n                      fieldName: \"section\",\r\n                      label: \"SECTION\",\r\n                    },\r\n                    {\r\n                      fieldName: \"day\",\r\n                      label: \"PICKUP DAY\",\r\n                    },\r\n                    {\r\n                      fieldName: \"last_edi_1\",\r\n                      label: \"MODIFIED DATE\",\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            };\r\n\r\n\r\n            /* Init the popupTemplate to query on the selected yard boundary */\r\n            const popupSpecialTrucks = {\r\n              // autocasts as new PopupTemplate()\r\n              title: \"Specialty Truck Area\",\r\n              content: [\r\n                {\r\n                  // It is also possible to set the fieldInfos outside of the content\r\n                  // directly in the popupTemplate. If no fieldInfos is specifically set\r\n                  // in the content, it defaults to whatever may be set within the popupTemplate.\r\n                  type: \"fields\",\r\n                  fieldInfos: [\r\n                    {\r\n                      fieldName: \"trucktypeu\",\r\n                      label: \"Truck Type\",\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            };\r\n\r\n            /* Init the popupTemplate to query on the selected yard boundary */\r\n            const popupCollectionYards = {\r\n              // autocasts as new PopupTemplate()\r\n              title: \"Collection Yard: {name}\",\r\n              content: [\r\n                {\r\n                  // It is also possible to set the fieldInfos outside of the content\r\n                  // directly in the popupTemplate. If no fieldInfos is specifically set\r\n                  // in the content, it defaults to whatever may be set within the popupTemplate.\r\n                  type: \"fields\",\r\n                  fieldInfos: [\r\n                    {\r\n                      fieldName: \"desc1\",\r\n                      label: \"Address\",\r\n                    },\r\n                    {\r\n                      fieldName: \"desig1\",\r\n                      label: \"Yard Description\",\r\n                    },\r\n                    {\r\n                      fieldName: \"desc4\",\r\n                      label: \"Site Details\",\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            };\r\n\r\n    \r\n            /* Init a featureLayer for the Collection Yards */\r\n            const scale = 36112;\r\n            const collectionboundary = new FeatureLayer({\r\n              url:\r\n                \"https://xmastree.cityoflasan.org/server/rest/services/Hosted/LASANCollectionDay/FeatureServer\",\r\n              outFields: [\"*\"],\r\n              popupTemplate: popupCollections,\r\n              title: \"Yards\"\r\n            });\r\n\r\n            /* Init a featureLayer for the Gated Communities */\r\n            const gatedcommunities = new FeatureLayer({\r\n              url:\r\n                \"https://xmastree.cityoflasan.org/server/rest/services/Hosted/GatedComm_02102021/FeatureServer\",\r\n              outFields: [\"*\"],\r\n              popupTemplate: popupGatedCommunity,\r\n              title: \"Gated Communities\",\r\n              visible: false,\r\n            });\r\n\r\n            /* Init a featureLayer for the Special Truck areas */\r\n            const specialtrucks = new FeatureLayer({\r\n              url:\r\n                \"https://xmastree.cityoflasan.org/server/rest/services/Hosted/LASAN_SpecialTruckAreas_02102021/FeatureServer\",\r\n              outFields: [\"*\"],\r\n              popupTemplate: popupSpecialTrucks,\r\n              title: \"Special Trucks\",\r\n              visible: false,\r\n            });\r\n\r\n            /* Init a featureLayer for the yard headquarters */\r\n            const collectionyards = new FeatureLayer({\r\n              url:\r\n                \"https://xmastree.cityoflasan.org/server/rest/services/Hosted/LASAN_Solids_Collection_Yards/FeatureServer\",\r\n              outFields: [\"*\"],\r\n              popupTemplate: popupCollectionYards,\r\n              title: \"Collection Yards\"\r\n            });\r\n\r\n            view.ui.add(locateBtn, \"top-left\");\r\n            view.ui.add(layerListExpand, \"top-left\");\r\n            view.ui.add(basemapExpand, \"top-right\");\r\n            map.addMany([collectionboundary, gatedcommunities, specialtrucks, collectionyards]);\r\n\r\n            /*\r\n            // Zooms to the extent of the layer as defined by\r\n            // its definitionExpression\r\n            // This method will work for all FeatureLayers, even\r\n            // those without a saved `fullExtent` on the service.\r\n            function zoomToLayer(layer) {\r\n              return layer.queryExtent().then(function(response) {\r\n                view.goTo(response.extent)\r\n                .catch(function(error){\r\n                  if (error.name != \"AbortError\"){\r\n                    console.error(error);\r\n                  }\r\n                });\r\n              });\r\n            }\r\n            */\r\n\r\n        }\r\n\r\n    }, []);    \r\n\r\n    const grid = 8;\r\n    const getItemStyle = (isDragging, draggableStyle) => ({\r\n      // some basic styles to make the items look a bit nicer\r\n      userSelect: \"none\",\r\n      padding: grid * 2,\r\n      margin: `0 0 ${grid}px 0`,\r\n      border: \"1px solid #333\",\r\n\r\n      // change background colour if dragging\r\n      background: isDragging ? \"lightblue\" : \"#f2f2f2\",\r\n\r\n      // styles we need to apply on draggables\r\n      ...draggableStyle\r\n    });\r\n\r\n    const getListStyle = isDraggingOver => ({\r\n      // background: isDraggingOver ? \"lightblue\" : \"white\",\r\n      background: \"#fff\",  \r\n      padding: grid,\r\n      width: 275\r\n    });\r\n\r\n    // a little function to help us with reordering the result\r\n    const reorder = (list, startIndex, endIndex) => {\r\n      const result = Array.from(list);\r\n      const [removed] = result.splice(startIndex, 1);\r\n      result.splice(endIndex, 0, removed);\r\n      return result;\r\n    };\r\n\r\n    const onDragEnd = (result) => {\r\n      // dropped outside the list\r\n      if (!result.destination) {\r\n        return;\r\n      }\r\n\r\n      const items = reorder(\r\n        routegroup,\r\n        result.source.index,\r\n        result.destination.index\r\n      );\r\n\r\n      setRouteGroup(items);\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{marginTop: '-13px'}}>\r\n            <CRow md=\"12\">\r\n              <CCol xs=\"12\" md=\"4\">                \r\n                <CButtonGroup>\r\n                  <CButton className=\"bg-gray-400\" onClick={() => setSelectedDate(prevDay(selectedDate))}>&lt;</CButton>\r\n                  <CButton color=\"secondary\" onClick={() => setSelectedDate(moment().format(\"ddd MM/DD/YY\"))}>Today</CButton>\r\n                  <CButton className=\"bg-gray-400\" onClick={() => setSelectedDate(nextDay(selectedDate))}>&gt;</CButton>\r\n                </CButtonGroup> &nbsp; &nbsp;\r\n                <span>{selectedDate}</span> \r\n              </CCol>\r\n              <CCol md=\"8\">\r\n                <CRow md=\"8\">\r\n                  <CCol xs=\"8\" md=\"5\">\r\n                    <CSelect custom name=\"selectYard\" id=\"selectYard\">\r\n                      <option value=\"0\">Please select a Yard</option>\r\n                      <option value=\"ev\">East Valley</option>\r\n                      <option value=\"hb\">Harbor</option>\r\n                      <option value=\"nc\">North Central</option>\r\n                      <option value=\"sla\">South Los Angeles</option>\r\n                      <option value=\"wla\">West Los Angeles</option>\r\n                      <option value=\"wv\">West Valley</option>\r\n                    </CSelect>\r\n                  </CCol>\r\n                  <CCol xs=\"8\" md=\"5\">\r\n                    <CSelect custom name=\"selectDriver\" id=\"selectDriver\">\r\n                      <option value=\"0\">Please select a Driver</option>\r\n                      <option value=\"1\">Option #1</option>\r\n                      <option value=\"2\">Option #2</option>\r\n                      <option value=\"3\">Option #3</option>\r\n                    </CSelect>\r\n                  </CCol>\r\n                  <CCol xs=\"8\" md=\"2\" style={{textAlign: \"right\"}}>\r\n                    <CButton color=\"dark\" onClick = {() => setCollapseRouteDiv(!collapseRouteDiv)}>\r\n                      <CIcon name={'cilLocationPin'} />&nbsp;Routes\r\n                    </CButton>\r\n                  </CCol>\r\n                </CRow>\r\n              </CCol>\r\n            </CRow>           \r\n            <div className=\"mapDiv\" style={{marginTop:'10px', height: winheight, border: '1px solid #333'}} ref={mapDiv}>\r\n              <CCollapse show={collapseRouteDiv}>\r\n                <div style={{width: '400px', height: winheight, borderLeft: '1px solid #333', backgroundColor:'#fff'}}>\r\n                  <CCard>\r\n                    <CCardHeader>\r\n                      <CButton color=\"dark\">\r\n                        <CIcon name={'cilShareAll'} />&nbsp;Dispatch All\r\n                      </CButton>\r\n                    </CCardHeader>\r\n                    <CCardBody>\r\n                      <div style={{ display: 'flex', gap: '10px', marginBottom: '10px', overflow: 'scroll' }}>\r\n                        <DragDropContext onDragEnd={onDragEnd}>\r\n                          <Droppable droppableId=\"droppable\">\r\n                            {(provided, snapshot) => (\r\n                              <div\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}\r\n                              >\r\n                                {routegroup.map((item, index) => (                                  \r\n                                  <Draggable key={item.id} draggableId={\"\" + item.id + \"\"} index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                      <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        style={getItemStyle(\r\n                                          snapshot.isDragging,\r\n                                          provided.draggableProps.style\r\n                                        )}\r\n                                      >\r\n                                        <div style={{ width:'30px', border:'1px dotted blue', fontSize:'16px', fontWeight:'bolder',\r\n                                                      backgroundColor:'#a1de45', textAlign:'center' }}>{index+1}</div>                                                      \r\n                                        <div>\r\n                                          <span style={{fontWeight:'bold'}}>Case Number:</span> {1000+index} <br />\r\n                                          <span style={{fontWeight:'bold'}}>Appt Number:</span> {\"SA-\" + (1000+index)} <br />\r\n                                          <span style={{fontWeight:'bold'}}>Address:</span> {item.address} <br />\r\n                                          <span style={{fontWeight:'bold'}}>Customer:</span> {item.contact} <br />\r\n                                          <span style={{fontWeight:'bold'}}>Work Type:</span> {item.type}\r\n                                        </div>                                          \r\n                                      </div>\r\n                                    )}\r\n                                  </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                              </div>\r\n                            )}\r\n                          </Droppable>\r\n                        </DragDropContext>\r\n                      </div>\r\n                    </CCardBody>                    \r\n                  </CCard>\r\n                </div>\r\n              </CCollapse>                \r\n            </div>\r\n        </div>        \r\n    );\r\n}\r\n\r\nfunction nextDay(selecteddate) {\r\n  let newdate = moment(selecteddate).add(1,'d').format(\"ddd MM/DD/YY\");\r\n  return newdate;\r\n}\r\n\r\nfunction prevDay(selecteddate) {\r\n  let newdate = moment(selecteddate).subtract(1,'d').format(\"ddd MM/DD/YY\");\r\n  return newdate;\r\n}\r\n\r\n\r\n\r\nexport default Fsl;"],"sourceRoot":""}